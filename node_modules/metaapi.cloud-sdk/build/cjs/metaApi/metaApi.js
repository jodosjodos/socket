"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return MetaApi;
    }
});
const _httpClient = /*#__PURE__*/ _interop_require_default(require("../clients/httpClient"));
const _provisioningProfileclient = /*#__PURE__*/ _interop_require_default(require("../clients/metaApi/provisioningProfile.client"));
const _provisioningProfileApi = /*#__PURE__*/ _interop_require_default(require("./provisioningProfileApi"));
const _metaApiWebsocketclient = /*#__PURE__*/ _interop_require_default(require("../clients/metaApi/metaApiWebsocket.client"));
const _metatraderAccountApi = /*#__PURE__*/ _interop_require_default(require("./metatraderAccountApi"));
const _metatraderAccountclient = /*#__PURE__*/ _interop_require_default(require("../clients/metaApi/metatraderAccount.client"));
const _metatraderAccountGeneratorApi = /*#__PURE__*/ _interop_require_default(require("./metatraderAccountGeneratorApi"));
const _metatraderAccountGeneratorclient = /*#__PURE__*/ _interop_require_default(require("../clients/metaApi/metatraderAccountGenerator.client"));
const _historicalMarketDataclient = /*#__PURE__*/ _interop_require_default(require("../clients/metaApi/historicalMarketData.client"));
const _clientApiclient = /*#__PURE__*/ _interop_require_default(require("../clients/metaApi/clientApi.client"));
const _connectionRegistry = /*#__PURE__*/ _interop_require_default(require("./connectionRegistry"));
const _errorHandler = require("../clients/errorHandler");
const _optionsValidator = /*#__PURE__*/ _interop_require_default(require("../clients/optionsValidator"));
const _latencyMonitor = /*#__PURE__*/ _interop_require_default(require("./latencyMonitor"));
const _expertAdvisorclient = /*#__PURE__*/ _interop_require_default(require("../clients/metaApi/expertAdvisor.client"));
const _logger = /*#__PURE__*/ _interop_require_default(require("../logger"));
const _domainclient = /*#__PURE__*/ _interop_require_default(require("../clients/domain.client"));
const _terminalHashManager = /*#__PURE__*/ _interop_require_default(require("./terminalHashManager"));
const _tokenManagementclient = /*#__PURE__*/ _interop_require_default(require("../clients/metaApi/tokenManagement.client"));
const _tokenManagementApi = /*#__PURE__*/ _interop_require_default(require("./tokenManagementApi"));
const _lodash = /*#__PURE__*/ _interop_require_default(require("lodash"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let MetaApi = class MetaApi {
    /**
   * Enables using Log4js logger with extended log levels for debugging instead of
   * console.* functions. Note that log4js configuration performed by the user.
   */ static enableLog4jsLogging() {
        _logger.default.useLog4js();
    }
    /**
   * Returns provisioning profile API
   * @returns {ProvisioningProfileApi} provisioning profile API
   */ get provisioningProfileApi() {
        return this._provisioningProfileApi;
    }
    /**
   * Returns MetaTrader account API
   * @return {MetatraderAccountApi} MetaTrader account API
   */ get metatraderAccountApi() {
        return this._metatraderAccountApi;
    }
    /**
   * Returns MetaTrader account generator API
   * @return {MetatraderDemoAccountApi} MetaTrader account generator API
   */ get metatraderAccountGeneratorApi() {
        return this._metatraderAccountGeneratorApi;
    }
    /**
   * Returns MetaApi application latency monitor
   * @return {LatencyMonitor} latency monitor
   */ get latencyMonitor() {
        return this._latencyMonitor;
    }
    /**
   * Returns token management API
   * @returns {TokenManagementApi} token management API
   */ get tokenManagementApi() {
        return this._tokenManagementApi;
    }
    /**
   * Closes all clients and connections and stops all internal jobs
   */ close() {
        this._metaApiWebsocketClient.removeLatencyListener(this._latencyMonitor);
        this._metaApiWebsocketClient.close();
        this._metaApiWebsocketClient.stop();
        this._terminalHashManager._stop();
    }
    /**
   * Constructs MetaApi class instance
   * @param {String} token authorization token
   * @param {MetaApiOpts} opts application options
   */ // eslint-disable-next-line complexity
    constructor(token, opts){
        const validator = new _optionsValidator.default();
        opts = _lodash.default.omit(opts || {}, [
            "connections"
        ]);
        const application = opts.application || "MetaApi";
        const domain = opts.domain || "agiliumtrade.agiliumtrade.ai";
        const requestTimeout = validator.validateNonZero(opts.requestTimeout, 60, "requestTimeout");
        const historicalMarketDataRequestTimeout = validator.validateNonZero(opts.historicalMarketDataRequestTimeout, 240, "historicalMarketDataRequestTimeout");
        const connectTimeout = validator.validateNonZero(opts.connectTimeout, 60, "connectTimeout");
        const packetOrderingTimeout = validator.validateNonZero(opts.packetOrderingTimeout, 60, "packetOrderingTimeout");
        const retryOpts = opts.retryOpts || {};
        const packetLogger = opts.packetLogger || {};
        const synchronizationThrottler = opts.synchronizationThrottler || {};
        const accountGeneratorRequestTimeout = validator.validateNonZero(opts.accountGeneratorRequestTimeout, 240, "accountGeneratorRequestTimeout");
        if (!application.match(/[a-zA-Z0-9_]+/)) {
            throw new _errorHandler.ValidationError("Application name must be non-empty string consisting from letters, digits and _ only");
        }
        const useSharedClientApi = opts.useSharedClientApi || false;
        const refreshSubscriptionsOpts = opts.refreshSubscriptionsOpts || {};
        const httpClient = new _httpClient.default(requestTimeout, retryOpts);
        const domainClient = new _domainclient.default(httpClient, token, domain);
        const historicalMarketDataHttpClient = new _httpClient.default(historicalMarketDataRequestTimeout, retryOpts);
        const accountGeneratorHttpClient = new _httpClient.default(accountGeneratorRequestTimeout, retryOpts);
        const clientApiClient = new _clientApiclient.default(httpClient, domainClient);
        const tokenManagmentClient = new _tokenManagementclient.default(httpClient, domainClient);
        this._terminalHashManager = new _terminalHashManager.default(clientApiClient, opts.keepHashTrees);
        this._metaApiWebsocketClient = new _metaApiWebsocketclient.default(this, domainClient, token, {
            application,
            domain,
            requestTimeout,
            connectTimeout,
            packetLogger,
            packetOrderingTimeout,
            synchronizationThrottler,
            retryOpts,
            useSharedClientApi,
            region: opts.region,
            unsubscribeThrottlingIntervalInSeconds: opts.unsubscribeThrottlingIntervalInSeconds
        });
        this._provisioningProfileApi = new _provisioningProfileApi.default(new _provisioningProfileclient.default(httpClient, domainClient));
        this._connectionRegistry = new _connectionRegistry.default(opts, this._metaApiWebsocketClient, this._terminalHashManager, application, refreshSubscriptionsOpts);
        let historicalMarketDataClient = new _historicalMarketDataclient.default(historicalMarketDataHttpClient, domainClient);
        this._metatraderAccountApi = new _metatraderAccountApi.default(new _metatraderAccountclient.default(httpClient, domainClient), this._metaApiWebsocketClient, this._connectionRegistry, new _expertAdvisorclient.default(httpClient, domainClient), historicalMarketDataClient, application);
        this._metatraderAccountGeneratorApi = new _metatraderAccountGeneratorApi.default(new _metatraderAccountGeneratorclient.default(accountGeneratorHttpClient, domainClient));
        this._tokenManagementApi = new _tokenManagementApi.default(tokenManagmentClient);
        if (opts.enableLatencyTracking || opts.enableLatencyMonitor) {
            this._latencyMonitor = new _latencyMonitor.default();
            this._metaApiWebsocketClient.addLatencyListener(this._latencyMonitor);
        }
        this._logger = _logger.default.getLogger("MetaAPI");
        if (process.env.IS_BROWSER) {
            if (!this._tokenManagementApi.areTokenResourcesNarrowedDown(token)) {
                this._logger.warn("USING THE ADMIN TOKEN");
                // eslint-disable-next-line max-len
                this._logger.info("It seems like you are using a admin API token. Since the token can be retrieven from the browser or mobile apps by end user this can lead to your application being compromised, unless you understand what are you doing. Please use Token Management API (https://github.com/agiliumtrade-ai/metaapi-node.js-sdk/blob/master/docs/tokenManagementApi.md) in your backend application to produce secure tokens which you can then use in web UI or mobile apps.");
            }
        }
    }
};

//# sourceMappingURL=data:application/json;base64,