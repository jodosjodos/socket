'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
import SynchronizationListener from '../clients/metaApi/synchronizationListener';
import LoggerManager from '../logger';
let MetaApiConnection = class MetaApiConnection extends SynchronizationListener {
    /**
   * Opens the connection. Can only be called the first time, next calls will be ignored.
   * @param {string} instanceId connection instance id
   * @return {Promise} promise resolving when the connection is opened
   */ connect(instanceId) {
        return _async_to_generator(function*() {})();
    }
    /**
   * Closes the connection. The instance of the class should no longer be used after this method is invoked.
   * @param {string} instanceId connection instance id
   */ close(instanceId) {
        return _async_to_generator(function*() {})();
    }
    /**
   * Returns MetaApi account
   * @return {MetatraderAccount} MetaApi account
   */ get account() {
        return this._account;
    }
    /**
   * Returns connection application
   * @return {String} connection application
   */ get application() {
        return this._application;
    }
    /**
   * Schedules the refresh task
   * @param {string} region replica region
   */ scheduleRefresh(region) {
        if (!this._refreshTasks[region]) {
            var _this__options_connections;
            var _this__options_connections_refreshReplicasMaxDelayInMs;
            const delay = Math.random() * ((_this__options_connections_refreshReplicasMaxDelayInMs = (_this__options_connections = this._options.connections) === null || _this__options_connections === void 0 ? void 0 : _this__options_connections.refreshReplicasMaxDelayInMs) !== null && _this__options_connections_refreshReplicasMaxDelayInMs !== void 0 ? _this__options_connections_refreshReplicasMaxDelayInMs : 6 * 60 * 60 * 1000);
            this._refreshTasks[region] = setTimeout(this._refreshReplicas, delay);
        }
    }
    /**
   * Cancels the scheduled refresh task
   * @param {string} region replica region
   */ cancelRefresh(region) {
        clearTimeout(this._refreshTasks[region]);
        delete this._refreshTasks[region];
    }
    /**
   * Refreshes account replicas
   */ _refreshReplicas() {
        var _this = this;
        return _async_to_generator(function*() {
            Object.values(_this._refreshTasks).forEach((task)=>clearTimeout(task));
            _this._refreshTasks = {};
            const oldReplicas = {};
            _this._account.replicas.forEach((replica)=>oldReplicas[replica.region] = replica.id);
            const newReplicas = {};
            let isAccountUpdated = false;
            try {
                yield _this._account.reload();
                isAccountUpdated = true;
                _this._account.replicas.forEach((replica)=>newReplicas[replica.region] = replica.id);
            } catch (error) {
                if (error.name === 'NotFoundError') {
                    if (_this._connectionRegistry) {
                        _this._connectionRegistry.closeAllInstances(_this._account.id);
                    }
                }
            }
            if (isAccountUpdated) {
                const deletedReplicas = {};
                const addedReplicas = {};
                Object.keys(oldReplicas).forEach((key)=>{
                    if (newReplicas[key] !== oldReplicas[key]) {
                        deletedReplicas[key] = oldReplicas[key];
                    }
                });
                Object.keys(newReplicas).forEach((key)=>{
                    if (newReplicas[key] !== oldReplicas[key]) {
                        addedReplicas[key] = newReplicas[key];
                    }
                });
                if (Object.keys(deletedReplicas).length) {
                    Object.values(deletedReplicas).forEach((replicaId)=>_this._websocketClient.onAccountDeleted(replicaId));
                }
                if (Object.keys(deletedReplicas).length || Object.keys(addedReplicas).length) {
                    newReplicas[_this._account.region] = _this._account.id;
                    _this._websocketClient.updateAccountCache(_this._account.id, newReplicas);
                    Object.entries(_this._account.accountRegions).forEach(([region, instance])=>{
                        if (!_this._options.region || _this._options.region === region) {
                            _this._websocketClient.ensureSubscribe(instance, 0);
                            _this._websocketClient.ensureSubscribe(instance, 1);
                        }
                    });
                }
            }
        })();
    }
    _ensureSynchronized(instanceIndex, key) {
        var _this = this;
        return _async_to_generator(function*() {
            let state = _this._getState(instanceIndex);
            if (state && !_this._closed) {
                try {
                    const synchronizationResult = yield _this.synchronize(instanceIndex);
                    if (synchronizationResult) {
                        state.synchronized = true;
                        state.synchronizationRetryIntervalInSeconds = 1;
                    }
                } catch (err) {
                    _this._logger.error('MetaApi websocket client for account ' + _this._account.id + ':' + instanceIndex + ' failed to synchronize', err);
                    if (state.shouldSynchronize === key) {
                        setTimeout(_this._ensureSynchronized.bind(_this, instanceIndex, key), state.synchronizationRetryIntervalInSeconds * 1000);
                        state.synchronizationRetryIntervalInSeconds = Math.min(state.synchronizationRetryIntervalInSeconds * 2, 300);
                    }
                }
            }
        })();
    }
    _getState(instanceIndex) {
        if (!this._stateByInstanceIndex['' + instanceIndex]) {
            this._stateByInstanceIndex['' + instanceIndex] = {
                instanceIndex,
                ordersSynchronized: {},
                dealsSynchronized: {},
                shouldSynchronize: undefined,
                synchronizationRetryIntervalInSeconds: 1,
                synchronized: false,
                lastDisconnectedSynchronizationId: undefined,
                lastSynchronizationId: undefined,
                disconnected: false
            };
        }
        return this._stateByInstanceIndex['' + instanceIndex];
    }
    _checkIsConnectionActive() {
        if (!this._opened) {
            throw new Error('This connection has not been initialized yet, please invoke await connection.connect()');
        }
        if (this._closed) {
            throw new Error('This connection has been closed, please create a new connection');
        }
    }
    /**
   * @typedef Config MetaApi options for connections
   * @property {Options} [connections] MetaApi connections options. Only for tests. Will be ignored when set in SDK
   */ /**
   * @typedef Options MetaApiConnection options
   * @property {number} [refreshReplicasMaxDelayInMs = 6 * 60 * 60 * 1000] max delay before refreshing replicas delay
   */ /**
   * Constructs MetaApi MetaTrader Api connection
   * @param {MetaApiOpts & Config} options MetaApi options
   * @param {MetaApiWebsocketClient} websocketClient MetaApi websocket client
   * @param {MetatraderAccount} account MetaTrader account id to connect to
   * @param {String} [application] application to use
   */ constructor(options, websocketClient, account, application){
        super();
        this._options = options;
        this._websocketClient = websocketClient;
        this._account = account;
        this._logger = LoggerManager.getLogger('MetaApiConnection');
        this._application = application;
        this._refreshReplicas = this._refreshReplicas.bind(this);
        this._refreshTasks = {};
    }
};
/**
 * Exposes MetaApi MetaTrader API connection to consumers
 */ export { MetaApiConnection as default };

//# sourceMappingURL=data:application/json;base64,