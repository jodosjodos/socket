'use strict';
import * as helpers from './helpers';
/**
 * Promise that can be used as a handle. It will not raise errors when rejected until it is explicitly awaited or
 * catch is set
 * @template T Promise result type
 * @implements {Promise}
 */ export class HandlePromise {
    /**
   * Returns whether the promise has resolved
   * @returns {boolean} whether the promise has resolved
   */ get resolved() {
        return !!this._promise.resolved;
    }
    /**
   * Returns whether the promise has rejected
   * @returns {boolean} whether the promise has rejected
   */ get rejected() {
        return !!this._promise.rejected;
    }
    /**
   * Returns whether the promise has completed (either resolved or rejected)
   * @returns {boolean} whether the promise has completed (either resolved or rejected)
   */ get completed() {
        return !!this._promise.completed;
    }
    /**
   * Constructs instance
   * @param {Promise<T>} [promise] original promise to wrap into the handle
   */ constructor(promise){
        this._promise = helpers.createHandlePromise();
        this.then = this._promise.then.bind(this._promise);
        this.catch = this._promise.catch.bind(this._promise);
        this.finally = this._promise.finally.bind(this.promise);
        this.resolve = this._promise.resolve.bind(this._promise);
        this.reject = this._promise.reject.bind(this._promise);
        this.timeout = this._promise.timeout.bind(this._promise);
        if (promise) {
            promise.then(this.resolve).catch(()=>{});
            promise.catch(this.reject);
        }
    }
}
/**
 * Represents a handle promise, resolving when needed condition is reached
 */ export class ConditionPromise extends HandlePromise {
    /**
   * Calls the predicate to check if the promise should be resolved
   */ check() {
        if (this._predicate()) {
            this.resolve();
        }
    }
    /**
   * Constructs instance
   * @param {() => boolean} predicate function that returns true when the condition is reached
   */ constructor(predicate){
        super();
        this._predicate = predicate;
        this.check();
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnLi9oZWxwZXJzJztcblxuLyoqXG4gKiBQcm9taXNlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSBoYW5kbGUuIEl0IHdpbGwgbm90IHJhaXNlIGVycm9ycyB3aGVuIHJlamVjdGVkIHVudGlsIGl0IGlzIGV4cGxpY2l0bHkgYXdhaXRlZCBvclxuICogY2F0Y2ggaXMgc2V0XG4gKiBAdGVtcGxhdGUgVCBQcm9taXNlIHJlc3VsdCB0eXBlXG4gKiBAaW1wbGVtZW50cyB7UHJvbWlzZX1cbiAqL1xuZXhwb3J0IGNsYXNzIEhhbmRsZVByb21pc2Uge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7UHJvbWlzZTxUPn0gW3Byb21pc2VdIG9yaWdpbmFsIHByb21pc2UgdG8gd3JhcCBpbnRvIHRoZSBoYW5kbGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb21pc2UpIHtcbiAgICB0aGlzLl9wcm9taXNlID0gaGVscGVycy5jcmVhdGVIYW5kbGVQcm9taXNlKCk7XG4gICAgdGhpcy50aGVuID0gdGhpcy5fcHJvbWlzZS50aGVuLmJpbmQodGhpcy5fcHJvbWlzZSk7XG4gICAgdGhpcy5jYXRjaCA9IHRoaXMuX3Byb21pc2UuY2F0Y2guYmluZCh0aGlzLl9wcm9taXNlKTtcbiAgICB0aGlzLmZpbmFsbHkgPSB0aGlzLl9wcm9taXNlLmZpbmFsbHkuYmluZCh0aGlzLnByb21pc2UpO1xuICAgIHRoaXMucmVzb2x2ZSA9IHRoaXMuX3Byb21pc2UucmVzb2x2ZS5iaW5kKHRoaXMuX3Byb21pc2UpO1xuICAgIHRoaXMucmVqZWN0ID0gdGhpcy5fcHJvbWlzZS5yZWplY3QuYmluZCh0aGlzLl9wcm9taXNlKTtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aGlzLl9wcm9taXNlLnRpbWVvdXQuYmluZCh0aGlzLl9wcm9taXNlKTtcbiAgICBpZiAocHJvbWlzZSkge1xuICAgICAgcHJvbWlzZS50aGVuKHRoaXMucmVzb2x2ZSkuY2F0Y2goKCkgPT4ge30pO1xuICAgICAgcHJvbWlzZS5jYXRjaCh0aGlzLnJlamVjdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJvbWlzZSBoYXMgcmVzb2x2ZWRcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIHByb21pc2UgaGFzIHJlc29sdmVkXG4gICAqL1xuICBnZXQgcmVzb2x2ZWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fcHJvbWlzZS5yZXNvbHZlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb21pc2UgaGFzIHJlamVjdGVkXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIHRoZSBwcm9taXNlIGhhcyByZWplY3RlZFxuICAgKi9cbiAgZ2V0IHJlamVjdGVkKCkge1xuICAgIHJldHVybiAhIXRoaXMuX3Byb21pc2UucmVqZWN0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwcm9taXNlIGhhcyBjb21wbGV0ZWQgKGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZClcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIHByb21pc2UgaGFzIGNvbXBsZXRlZCAoZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkKVxuICAgKi9cbiAgZ2V0IGNvbXBsZXRlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9wcm9taXNlLmNvbXBsZXRlZDtcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBoYW5kbGUgcHJvbWlzZSwgcmVzb2x2aW5nIHdoZW4gbmVlZGVkIGNvbmRpdGlvbiBpcyByZWFjaGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25kaXRpb25Qcm9taXNlIGV4dGVuZHMgSGFuZGxlUHJvbWlzZSB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHsoKSA9PiBib29sZWFufSBwcmVkaWNhdGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgd2hlbiB0aGUgY29uZGl0aW9uIGlzIHJlYWNoZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByZWRpY2F0ZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgIHRoaXMuY2hlY2soKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgcHJlZGljYXRlIHRvIGNoZWNrIGlmIHRoZSBwcm9taXNlIHNob3VsZCBiZSByZXNvbHZlZFxuICAgKi9cbiAgY2hlY2soKSB7XG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZSgpKSB7XG4gICAgICB0aGlzLnJlc29sdmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJoZWxwZXJzIiwiSGFuZGxlUHJvbWlzZSIsInJlc29sdmVkIiwiX3Byb21pc2UiLCJyZWplY3RlZCIsImNvbXBsZXRlZCIsImNvbnN0cnVjdG9yIiwicHJvbWlzZSIsImNyZWF0ZUhhbmRsZVByb21pc2UiLCJ0aGVuIiwiYmluZCIsImNhdGNoIiwiZmluYWxseSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aW1lb3V0IiwiQ29uZGl0aW9uUHJvbWlzZSIsImNoZWNrIiwiX3ByZWRpY2F0ZSIsInByZWRpY2F0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxZQUFZQSxhQUFhLFlBQVk7QUFFckM7Ozs7O0NBS0MsR0FDRCxPQUFPLE1BQU1DO0lBb0JYOzs7R0FHQyxHQUNELElBQUlDLFdBQVc7UUFDYixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNDLFFBQVEsQ0FBQ0QsUUFBUTtJQUNqQztJQUVBOzs7R0FHQyxHQUNELElBQUlFLFdBQVc7UUFDYixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNELFFBQVEsQ0FBQ0MsUUFBUTtJQUNqQztJQUVBOzs7R0FHQyxHQUNELElBQUlDLFlBQVk7UUFDZCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNGLFFBQVEsQ0FBQ0UsU0FBUztJQUNsQztJQXhDQTs7O0dBR0MsR0FDREMsWUFBWUMsT0FBTyxDQUFFO1FBQ25CLElBQUksQ0FBQ0osUUFBUSxHQUFHSCxRQUFRUSxtQkFBbUI7UUFDM0MsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDTixRQUFRLENBQUNNLElBQUksQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQ1AsUUFBUTtRQUNqRCxJQUFJLENBQUNRLEtBQUssR0FBRyxJQUFJLENBQUNSLFFBQVEsQ0FBQ1EsS0FBSyxDQUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDUCxRQUFRO1FBQ25ELElBQUksQ0FBQ1MsT0FBTyxHQUFHLElBQUksQ0FBQ1QsUUFBUSxDQUFDUyxPQUFPLENBQUNGLElBQUksQ0FBQyxJQUFJLENBQUNILE9BQU87UUFDdEQsSUFBSSxDQUFDTSxPQUFPLEdBQUcsSUFBSSxDQUFDVixRQUFRLENBQUNVLE9BQU8sQ0FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQ1AsUUFBUTtRQUN2RCxJQUFJLENBQUNXLE1BQU0sR0FBRyxJQUFJLENBQUNYLFFBQVEsQ0FBQ1csTUFBTSxDQUFDSixJQUFJLENBQUMsSUFBSSxDQUFDUCxRQUFRO1FBQ3JELElBQUksQ0FBQ1ksT0FBTyxHQUFHLElBQUksQ0FBQ1osUUFBUSxDQUFDWSxPQUFPLENBQUNMLElBQUksQ0FBQyxJQUFJLENBQUNQLFFBQVE7UUFDdkQsSUFBSUksU0FBUztZQUNYQSxRQUFRRSxJQUFJLENBQUMsSUFBSSxDQUFDSSxPQUFPLEVBQUVGLEtBQUssQ0FBQyxLQUFPO1lBQ3hDSixRQUFRSSxLQUFLLENBQUMsSUFBSSxDQUFDRyxNQUFNO1FBQzNCO0lBQ0Y7QUF5QkY7QUFFQTs7Q0FFQyxHQUNELE9BQU8sTUFBTUUseUJBQXlCZjtJQVlwQzs7R0FFQyxHQUNEZ0IsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDQyxVQUFVLElBQUk7WUFDckIsSUFBSSxDQUFDTCxPQUFPO1FBQ2Q7SUFDRjtJQWpCQTs7O0dBR0MsR0FDRFAsWUFBWWEsU0FBUyxDQUFFO1FBQ3JCLEtBQUs7UUFDTCxJQUFJLENBQUNELFVBQVUsR0FBR0M7UUFDbEIsSUFBSSxDQUFDRixLQUFLO0lBQ1o7QUFVRiJ9