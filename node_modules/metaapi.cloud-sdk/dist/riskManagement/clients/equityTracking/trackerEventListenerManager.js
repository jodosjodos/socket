"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return TrackerEventListenerManager;
    }
});
const _randomstring = /*#__PURE__*/ _interop_require_default(require("randomstring"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let TrackerEventListenerManager = class TrackerEventListenerManager {
    /**
   * Returns the dictionary of tracker event listeners
   * @returns {{[listenerId: string]: TrackerEventListener}} dictionary of tracker event listeners
   */ get trackerEventListeners() {
        return this._trackerEventListeners;
    }
    /**
   * Adds a tracker event listener
   * @param {TrackerEventListener} listener tracker event listener 
   * @param {String} [accountId] account id
   * @param {String} [trackerId] tracker id
   * @param {Number} [sequenceNumber] event sequence number
   * @returns {String} tracker event listener id
   */ addTrackerEventListener(listener, accountId, trackerId, sequenceNumber) {
        const listenerId = _randomstring.default.generate(10);
        this._trackerEventListeners[listenerId] = listener;
        this._startTrackerEventJob(listenerId, listener, accountId, trackerId, sequenceNumber);
        return listenerId;
    }
    /**
   * Removes tracker event listener by id
   * @param {String} listenerId listener id 
   */ removeTrackerEventListener(listenerId) {
        delete this._trackerEventListeners[listenerId];
    }
    async _startTrackerEventJob(listenerId, listener, accountId, trackerId, sequenceNumber) {
        let throttleTime = this._errorThrottleTime;
        while(this._trackerEventListeners[listenerId]){
            try {
                const packets = await this._domainClient.requestApi({
                    url: "/users/current/tracker-events/stream",
                    method: "GET",
                    params: {
                        previousSequenceNumber: sequenceNumber,
                        accountId,
                        trackerId,
                        limit: 1000
                    }
                }, true);
                for (let packet of packets){
                    await listener.onTrackerEvent(packet);
                }
                throttleTime = this._errorThrottleTime;
                if (this._trackerEventListeners[listenerId] && packets.length) {
                    sequenceNumber = packets.slice(-1)[0].sequenceNumber;
                }
            } catch (err) {
                listener.onError(err);
                await new Promise((res)=>setTimeout(res, throttleTime));
                throttleTime = Math.min(throttleTime * 2, 30000);
            }
        }
    }
    /**
   * Constructs tracker event listener manager instance
   * @param {DomainClient} domainClient domain client
   */ constructor(domainClient){
        this._domainClient = domainClient;
        this._trackerEventListeners = {};
        this._errorThrottleTime = 1000;
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCByYW5kb21zdHJpbmcgZnJvbSAncmFuZG9tc3RyaW5nJztcblxuLyoqXG4gKiBNYW5hZ2VyIGZvciBoYW5kbGluZyB0cmFja2luZyBldmVudCBsaXN0ZW5lcnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhY2tlckV2ZW50TGlzdGVuZXJNYW5hZ2VyIHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyB0cmFja2VyIGV2ZW50IGxpc3RlbmVyIG1hbmFnZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtEb21haW5DbGllbnR9IGRvbWFpbkNsaWVudCBkb21haW4gY2xpZW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb21haW5DbGllbnQpIHtcbiAgICB0aGlzLl9kb21haW5DbGllbnQgPSBkb21haW5DbGllbnQ7XG4gICAgdGhpcy5fdHJhY2tlckV2ZW50TGlzdGVuZXJzID0ge307XG4gICAgdGhpcy5fZXJyb3JUaHJvdHRsZVRpbWUgPSAxMDAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRpY3Rpb25hcnkgb2YgdHJhY2tlciBldmVudCBsaXN0ZW5lcnNcbiAgICogQHJldHVybnMge3tbbGlzdGVuZXJJZDogc3RyaW5nXTogVHJhY2tlckV2ZW50TGlzdGVuZXJ9fSBkaWN0aW9uYXJ5IG9mIHRyYWNrZXIgZXZlbnQgbGlzdGVuZXJzXG4gICAqL1xuICBnZXQgdHJhY2tlckV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFja2VyRXZlbnRMaXN0ZW5lcnM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHRyYWNrZXIgZXZlbnQgbGlzdGVuZXJcbiAgICogQHBhcmFtIHtUcmFja2VyRXZlbnRMaXN0ZW5lcn0gbGlzdGVuZXIgdHJhY2tlciBldmVudCBsaXN0ZW5lciBcbiAgICogQHBhcmFtIHtTdHJpbmd9IFthY2NvdW50SWRdIGFjY291bnQgaWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt0cmFja2VySWRdIHRyYWNrZXIgaWRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzZXF1ZW5jZU51bWJlcl0gZXZlbnQgc2VxdWVuY2UgbnVtYmVyXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRyYWNrZXIgZXZlbnQgbGlzdGVuZXIgaWRcbiAgICovXG4gIGFkZFRyYWNrZXJFdmVudExpc3RlbmVyKGxpc3RlbmVyLCBhY2NvdW50SWQsIHRyYWNrZXJJZCwgc2VxdWVuY2VOdW1iZXIpIHtcbiAgICBjb25zdCBsaXN0ZW5lcklkID0gcmFuZG9tc3RyaW5nLmdlbmVyYXRlKDEwKTtcbiAgICB0aGlzLl90cmFja2VyRXZlbnRMaXN0ZW5lcnNbbGlzdGVuZXJJZF0gPSBsaXN0ZW5lcjtcbiAgICB0aGlzLl9zdGFydFRyYWNrZXJFdmVudEpvYihsaXN0ZW5lcklkLCBsaXN0ZW5lciwgYWNjb3VudElkLCB0cmFja2VySWQsIHNlcXVlbmNlTnVtYmVyKTtcbiAgICByZXR1cm4gbGlzdGVuZXJJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRyYWNrZXIgZXZlbnQgbGlzdGVuZXIgYnkgaWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGxpc3RlbmVySWQgbGlzdGVuZXIgaWQgXG4gICAqL1xuICByZW1vdmVUcmFja2VyRXZlbnRMaXN0ZW5lcihsaXN0ZW5lcklkKSB7XG4gICAgZGVsZXRlIHRoaXMuX3RyYWNrZXJFdmVudExpc3RlbmVyc1tsaXN0ZW5lcklkXTtcbiAgfVxuXG4gIGFzeW5jIF9zdGFydFRyYWNrZXJFdmVudEpvYihsaXN0ZW5lcklkLCBsaXN0ZW5lciwgYWNjb3VudElkLCB0cmFja2VySWQsIHNlcXVlbmNlTnVtYmVyKSB7XG4gICAgbGV0IHRocm90dGxlVGltZSA9IHRoaXMuX2Vycm9yVGhyb3R0bGVUaW1lO1xuXG4gICAgd2hpbGUgKHRoaXMuX3RyYWNrZXJFdmVudExpc3RlbmVyc1tsaXN0ZW5lcklkXSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFja2V0cyA9IGF3YWl0IHRoaXMuX2RvbWFpbkNsaWVudC5yZXF1ZXN0QXBpKHtcbiAgICAgICAgICB1cmw6ICcvdXNlcnMvY3VycmVudC90cmFja2VyLWV2ZW50cy9zdHJlYW0nLFxuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwcmV2aW91c1NlcXVlbmNlTnVtYmVyOiBzZXF1ZW5jZU51bWJlcixcbiAgICAgICAgICAgIGFjY291bnRJZCwgdHJhY2tlcklkLFxuICAgICAgICAgICAgbGltaXQ6IDEwMDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgICBmb3IgKGxldCBwYWNrZXQgb2YgcGFja2V0cykge1xuICAgICAgICAgIGF3YWl0IGxpc3RlbmVyLm9uVHJhY2tlckV2ZW50KHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3R0bGVUaW1lID0gdGhpcy5fZXJyb3JUaHJvdHRsZVRpbWU7XG4gICAgICAgIGlmICh0aGlzLl90cmFja2VyRXZlbnRMaXN0ZW5lcnNbbGlzdGVuZXJJZF0gJiYgcGFja2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICBzZXF1ZW5jZU51bWJlciA9IHBhY2tldHMuc2xpY2UoLTEpWzBdLnNlcXVlbmNlTnVtYmVyO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbGlzdGVuZXIub25FcnJvcihlcnIpO1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXMgPT4gc2V0VGltZW91dChyZXMsIHRocm90dGxlVGltZSkpO1xuICAgICAgICB0aHJvdHRsZVRpbWUgPSBNYXRoLm1pbih0aHJvdHRsZVRpbWUgKiAyLCAzMDAwMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbiJdLCJuYW1lcyI6WyJUcmFja2VyRXZlbnRMaXN0ZW5lck1hbmFnZXIiLCJ0cmFja2VyRXZlbnRMaXN0ZW5lcnMiLCJfdHJhY2tlckV2ZW50TGlzdGVuZXJzIiwiYWRkVHJhY2tlckV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsImFjY291bnRJZCIsInRyYWNrZXJJZCIsInNlcXVlbmNlTnVtYmVyIiwibGlzdGVuZXJJZCIsInJhbmRvbXN0cmluZyIsImdlbmVyYXRlIiwiX3N0YXJ0VHJhY2tlckV2ZW50Sm9iIiwicmVtb3ZlVHJhY2tlckV2ZW50TGlzdGVuZXIiLCJ0aHJvdHRsZVRpbWUiLCJfZXJyb3JUaHJvdHRsZVRpbWUiLCJwYWNrZXRzIiwiX2RvbWFpbkNsaWVudCIsInJlcXVlc3RBcGkiLCJ1cmwiLCJtZXRob2QiLCJwYXJhbXMiLCJwcmV2aW91c1NlcXVlbmNlTnVtYmVyIiwibGltaXQiLCJwYWNrZXQiLCJvblRyYWNrZXJFdmVudCIsImxlbmd0aCIsInNsaWNlIiwiZXJyIiwib25FcnJvciIsIlByb21pc2UiLCJyZXMiLCJzZXRUaW1lb3V0IiwiTWF0aCIsIm1pbiIsImNvbnN0cnVjdG9yIiwiZG9tYWluQ2xpZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztlQU9xQkE7OztxRUFMSTs7Ozs7O0FBS1YsSUFBQSxBQUFNQSw4QkFBTixNQUFNQTtJQVluQjs7O0dBR0MsR0FDRCxJQUFJQyx3QkFBd0I7UUFDMUIsT0FBTyxJQUFJLENBQUNDLHNCQUFzQjtJQUNwQztJQUVBOzs7Ozs7O0dBT0MsR0FDREMsd0JBQXdCQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFQyxjQUFjLEVBQUU7UUFDdEUsTUFBTUMsYUFBYUMscUJBQVksQ0FBQ0MsUUFBUSxDQUFDO1FBQ3pDLElBQUksQ0FBQ1Isc0JBQXNCLENBQUNNLFdBQVcsR0FBR0o7UUFDMUMsSUFBSSxDQUFDTyxxQkFBcUIsQ0FBQ0gsWUFBWUosVUFBVUMsV0FBV0MsV0FBV0M7UUFDdkUsT0FBT0M7SUFDVDtJQUVBOzs7R0FHQyxHQUNESSwyQkFBMkJKLFVBQVUsRUFBRTtRQUNyQyxPQUFPLElBQUksQ0FBQ04sc0JBQXNCLENBQUNNLFdBQVc7SUFDaEQ7SUFFQSxNQUFNRyxzQkFBc0JILFVBQVUsRUFBRUosUUFBUSxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsY0FBYyxFQUFFO1FBQ3RGLElBQUlNLGVBQWUsSUFBSSxDQUFDQyxrQkFBa0I7UUFFMUMsTUFBTyxJQUFJLENBQUNaLHNCQUFzQixDQUFDTSxXQUFXLENBQUU7WUFDOUMsSUFBSTtnQkFDRixNQUFNTyxVQUFVLE1BQU0sSUFBSSxDQUFDQyxhQUFhLENBQUNDLFVBQVUsQ0FBQztvQkFDbERDLEtBQUs7b0JBQ0xDLFFBQVE7b0JBQ1JDLFFBQVE7d0JBQ05DLHdCQUF3QmQ7d0JBQ3hCRjt3QkFBV0M7d0JBQ1hnQixPQUFPO29CQUNUO2dCQUNGLEdBQUc7Z0JBQ0gsS0FBSyxJQUFJQyxVQUFVUixRQUFTO29CQUMxQixNQUFNWCxTQUFTb0IsY0FBYyxDQUFDRDtnQkFDaEM7Z0JBQ0FWLGVBQWUsSUFBSSxDQUFDQyxrQkFBa0I7Z0JBQ3RDLElBQUksSUFBSSxDQUFDWixzQkFBc0IsQ0FBQ00sV0FBVyxJQUFJTyxRQUFRVSxNQUFNLEVBQUU7b0JBQzdEbEIsaUJBQWlCUSxRQUFRVyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDbkIsY0FBYztnQkFDdEQ7WUFDRixFQUFFLE9BQU9vQixLQUFLO2dCQUNadkIsU0FBU3dCLE9BQU8sQ0FBQ0Q7Z0JBQ2pCLE1BQU0sSUFBSUUsUUFBUUMsQ0FBQUEsTUFBT0MsV0FBV0QsS0FBS2pCO2dCQUN6Q0EsZUFBZW1CLEtBQUtDLEdBQUcsQ0FBQ3BCLGVBQWUsR0FBRztZQUM1QztRQUNGO0lBQ0Y7SUFwRUE7OztHQUdDLEdBQ0RxQixZQUFZQyxZQUFZLENBQUU7UUFDeEIsSUFBSSxDQUFDbkIsYUFBYSxHQUFHbUI7UUFDckIsSUFBSSxDQUFDakMsc0JBQXNCLEdBQUcsQ0FBQztRQUMvQixJQUFJLENBQUNZLGtCQUFrQixHQUFHO0lBQzVCO0FBOERGIn0=