"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return MetaStats;
    }
});
const _httpClient = /*#__PURE__*/ _interop_require_default(require("./clients/httpClient"));
const _domainclient = /*#__PURE__*/ _interop_require_default(require("./clients/domain.client"));
const _metaStatsclient = /*#__PURE__*/ _interop_require_default(require("./clients/metaStats.client"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MetaStats {
    /**
   * Returns the getMetrics MetaStatsClient method bound to the MetaStatsClient instance
   * @returns {Function} getMetrics MetaStatsClient method
   */ get getMetrics() {
        return this._metaStatsClient.getMetrics.bind(this._metaStatsClient);
    }
    /**
   * Returns the getAccountTrades MetaStatsClient method bound to the MetaStatsClient instance
   * @returns {Function} getAccountTrades MetaStatsClient method
   */ get getAccountTrades() {
        return this._metaStatsClient.getAccountTrades.bind(this._metaStatsClient);
    }
    /**
   * Returns the getAccountOpenTrades MetaStatsClient method bound to the MetaStatsClient instance
   * @returns {Function} getAccountOpenTrades MetaStatsClient method
   */ get getAccountOpenTrades() {
        return this._metaStatsClient.getAccountOpenTrades.bind(this._metaStatsClient);
    }
    /**
   * @typedef {Object} ConnectionOptions connection options
   * @property {Number} [requestTimeout] request timeout in seconds, default 60
   * @property {String} [domain] request domain, default 'agiliumtrade.agiliumtrade.ai'
   * @property {RetryOptions} [retryOpts] retry options
   */ /**
   * Constructs MetaStats class instance
   * @param {String} token authorization token
   * @param {ConnectionOptions} [opts] connection options
   */ constructor(token, opts = {}){
        const httpClient = new _httpClient.default(opts.requestTimeout, opts.retryOpts);
        const domainClient = new _domainclient.default(httpClient, token, opts.domain);
        this._metaStatsClient = new _metaStatsclient.default(domainClient);
    }
}
