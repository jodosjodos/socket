"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return StopoutListenerManager;
    }
});
const _metaApiclient = /*#__PURE__*/ _interop_require_default(require("../../metaApi.client"));
const _randomstring = /*#__PURE__*/ _interop_require_default(require("randomstring"));
const _logger = /*#__PURE__*/ _interop_require_default(require("../../../logger"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let StopoutListenerManager = class StopoutListenerManager extends _metaApiclient.default {
    /**
   * Returns the dictionary of stopout listeners
   * @returns {Object} dictionary of stopout listeners
   */ get stopoutListeners() {
        return this._stopoutListeners;
    }
    /**
   * Adds a stopout listener
   * @param {StopoutListener} listener 
   * @param {String} [accountId] account id
   * @param {String} [strategyId] strategy id
   * @param {Number} [sequenceNumber] event sequence number
   * @returns {String} stopout listener id
   */ addStopoutListener(listener, accountId, strategyId, sequenceNumber) {
        const listenerId = _randomstring.default.generate(10);
        this._stopoutListeners[listenerId] = listener;
        this._startStopoutEventJob(listenerId, listener, accountId, strategyId, sequenceNumber);
        return listenerId;
    }
    /**
   * Removes stopout listener by id
   * @param {String} listenerId listener id 
   */ removeStopoutListener(listenerId) {
        delete this._stopoutListeners[listenerId];
    }
    async _startStopoutEventJob(listenerId, listener, accountId, strategyId, sequenceNumber) {
        let throttleTime = this._errorThrottleTime;
        while(this._stopoutListeners[listenerId]){
            const opts = {
                url: "/users/current/stopouts/stream",
                method: "GET",
                params: {
                    previousSequenceNumber: sequenceNumber,
                    subscriberId: accountId,
                    strategyId: strategyId,
                    limit: 1000
                },
                headers: {
                    "auth-token": this._token
                },
                json: true
            };
            try {
                const packets = await this._domainClient.requestCopyFactory(opts, true);
                await listener.onStopout(packets);
                throttleTime = this._errorThrottleTime;
                if (this._stopoutListeners[listenerId] && packets.length) {
                    sequenceNumber = packets.slice(-1)[0].sequenceNumber;
                }
            } catch (err) {
                await listener.onError(err);
                this._logger.error(`Failed to retrieve stopouts stream for strategy ${strategyId}, ` + `listener ${listenerId}, retrying in ${Math.floor(throttleTime / 1000)} seconds`, err);
                await new Promise((res)=>setTimeout(res, throttleTime));
                throttleTime = Math.min(throttleTime * 2, 30000);
            }
        }
    }
    /**
   * Constructs stopout listener manager instance
   * @param {DomainClient} domainClient domain client
   */ constructor(domainClient){
        super(domainClient);
        this._domainClient = domainClient;
        this._stopoutListeners = {};
        this._errorThrottleTime = 1000;
        this._logger = _logger.default.getLogger("StopoutListenerManager");
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBNZXRhQXBpQ2xpZW50IGZyb20gJy4uLy4uL21ldGFBcGkuY2xpZW50JztcbmltcG9ydCByYW5kb21zdHJpbmcgZnJvbSAncmFuZG9tc3RyaW5nJztcbmltcG9ydCBMb2dnZXJNYW5hZ2VyIGZyb20gJy4uLy4uLy4uL2xvZ2dlcic7XG5cbi8qKlxuICogU3RvcG91dCBldmVudCBsaXN0ZW5lciBtYW5hZ2VyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3BvdXRMaXN0ZW5lck1hbmFnZXIgZXh0ZW5kcyBNZXRhQXBpQ2xpZW50IHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBzdG9wb3V0IGxpc3RlbmVyIG1hbmFnZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtEb21haW5DbGllbnR9IGRvbWFpbkNsaWVudCBkb21haW4gY2xpZW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb21haW5DbGllbnQpIHtcbiAgICBzdXBlcihkb21haW5DbGllbnQpO1xuICAgIHRoaXMuX2RvbWFpbkNsaWVudCA9IGRvbWFpbkNsaWVudDtcbiAgICB0aGlzLl9zdG9wb3V0TGlzdGVuZXJzID0ge307XG4gICAgdGhpcy5fZXJyb3JUaHJvdHRsZVRpbWUgPSAxMDAwO1xuICAgIHRoaXMuX2xvZ2dlciA9IExvZ2dlck1hbmFnZXIuZ2V0TG9nZ2VyKCdTdG9wb3V0TGlzdGVuZXJNYW5hZ2VyJyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGljdGlvbmFyeSBvZiBzdG9wb3V0IGxpc3RlbmVyc1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBkaWN0aW9uYXJ5IG9mIHN0b3BvdXQgbGlzdGVuZXJzXG4gICAqL1xuICBnZXQgc3RvcG91dExpc3RlbmVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RvcG91dExpc3RlbmVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgc3RvcG91dCBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge1N0b3BvdXRMaXN0ZW5lcn0gbGlzdGVuZXIgXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbYWNjb3VudElkXSBhY2NvdW50IGlkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbc3RyYXRlZ3lJZF0gc3RyYXRlZ3kgaWRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzZXF1ZW5jZU51bWJlcl0gZXZlbnQgc2VxdWVuY2UgbnVtYmVyXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHN0b3BvdXQgbGlzdGVuZXIgaWRcbiAgICovXG4gIGFkZFN0b3BvdXRMaXN0ZW5lcihsaXN0ZW5lciwgYWNjb3VudElkLCBzdHJhdGVneUlkLCBzZXF1ZW5jZU51bWJlcikge1xuICAgIGNvbnN0IGxpc3RlbmVySWQgPSByYW5kb21zdHJpbmcuZ2VuZXJhdGUoMTApO1xuICAgIHRoaXMuX3N0b3BvdXRMaXN0ZW5lcnNbbGlzdGVuZXJJZF0gPSBsaXN0ZW5lcjtcbiAgICB0aGlzLl9zdGFydFN0b3BvdXRFdmVudEpvYihsaXN0ZW5lcklkLCBsaXN0ZW5lciwgYWNjb3VudElkLCBzdHJhdGVneUlkLCBzZXF1ZW5jZU51bWJlcik7XG4gICAgcmV0dXJuIGxpc3RlbmVySWQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBzdG9wb3V0IGxpc3RlbmVyIGJ5IGlkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsaXN0ZW5lcklkIGxpc3RlbmVyIGlkIFxuICAgKi9cbiAgcmVtb3ZlU3RvcG91dExpc3RlbmVyKGxpc3RlbmVySWQpIHtcbiAgICBkZWxldGUgdGhpcy5fc3RvcG91dExpc3RlbmVyc1tsaXN0ZW5lcklkXTtcbiAgfVxuXG4gIGFzeW5jIF9zdGFydFN0b3BvdXRFdmVudEpvYihsaXN0ZW5lcklkLCBsaXN0ZW5lciwgYWNjb3VudElkLCBzdHJhdGVneUlkLCBzZXF1ZW5jZU51bWJlcikge1xuICAgIGxldCB0aHJvdHRsZVRpbWUgPSB0aGlzLl9lcnJvclRocm90dGxlVGltZTtcblxuICAgIHdoaWxlKHRoaXMuX3N0b3BvdXRMaXN0ZW5lcnNbbGlzdGVuZXJJZF0pIHtcbiAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgIHVybDogJy91c2Vycy9jdXJyZW50L3N0b3BvdXRzL3N0cmVhbScsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHByZXZpb3VzU2VxdWVuY2VOdW1iZXI6IHNlcXVlbmNlTnVtYmVyLFxuICAgICAgICAgIHN1YnNjcmliZXJJZDogYWNjb3VudElkLFxuICAgICAgICAgIHN0cmF0ZWd5SWQ6IHN0cmF0ZWd5SWQsXG4gICAgICAgICAgbGltaXQ6IDEwMDBcbiAgICAgICAgfSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdhdXRoLXRva2VuJzogdGhpcy5fdG9rZW5cbiAgICAgICAgfSxcbiAgICAgICAganNvbjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhY2tldHMgPSBhd2FpdCB0aGlzLl9kb21haW5DbGllbnQucmVxdWVzdENvcHlGYWN0b3J5KG9wdHMsIHRydWUpO1xuICAgICAgICBhd2FpdCBsaXN0ZW5lci5vblN0b3BvdXQocGFja2V0cyk7XG4gICAgICAgIHRocm90dGxlVGltZSA9IHRoaXMuX2Vycm9yVGhyb3R0bGVUaW1lO1xuICAgICAgICBpZih0aGlzLl9zdG9wb3V0TGlzdGVuZXJzW2xpc3RlbmVySWRdICYmIHBhY2tldHMubGVuZ3RoKSB7XG4gICAgICAgICAgc2VxdWVuY2VOdW1iZXIgPSBwYWNrZXRzLnNsaWNlKC0xKVswXS5zZXF1ZW5jZU51bWJlcjtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGF3YWl0IGxpc3RlbmVyLm9uRXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gcmV0cmlldmUgc3RvcG91dHMgc3RyZWFtIGZvciBzdHJhdGVneSAke3N0cmF0ZWd5SWR9LCBgICtcbiAgICAgICAgICAgIGBsaXN0ZW5lciAke2xpc3RlbmVySWR9LCByZXRyeWluZyBpbiAke01hdGguZmxvb3IodGhyb3R0bGVUaW1lLzEwMDApfSBzZWNvbmRzYCwgZXJyKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzID0+IHNldFRpbWVvdXQocmVzLCB0aHJvdHRsZVRpbWUpKTtcbiAgICAgICAgdGhyb3R0bGVUaW1lID0gTWF0aC5taW4odGhyb3R0bGVUaW1lICogMiwgMzAwMDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iXSwibmFtZXMiOlsiU3RvcG91dExpc3RlbmVyTWFuYWdlciIsIk1ldGFBcGlDbGllbnQiLCJzdG9wb3V0TGlzdGVuZXJzIiwiX3N0b3BvdXRMaXN0ZW5lcnMiLCJhZGRTdG9wb3V0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImFjY291bnRJZCIsInN0cmF0ZWd5SWQiLCJzZXF1ZW5jZU51bWJlciIsImxpc3RlbmVySWQiLCJyYW5kb21zdHJpbmciLCJnZW5lcmF0ZSIsIl9zdGFydFN0b3BvdXRFdmVudEpvYiIsInJlbW92ZVN0b3BvdXRMaXN0ZW5lciIsInRocm90dGxlVGltZSIsIl9lcnJvclRocm90dGxlVGltZSIsIm9wdHMiLCJ1cmwiLCJtZXRob2QiLCJwYXJhbXMiLCJwcmV2aW91c1NlcXVlbmNlTnVtYmVyIiwic3Vic2NyaWJlcklkIiwibGltaXQiLCJoZWFkZXJzIiwiX3Rva2VuIiwianNvbiIsInBhY2tldHMiLCJfZG9tYWluQ2xpZW50IiwicmVxdWVzdENvcHlGYWN0b3J5Iiwib25TdG9wb3V0IiwibGVuZ3RoIiwic2xpY2UiLCJlcnIiLCJvbkVycm9yIiwiX2xvZ2dlciIsImVycm9yIiwiTWF0aCIsImZsb29yIiwiUHJvbWlzZSIsInJlcyIsInNldFRpbWVvdXQiLCJtaW4iLCJjb25zdHJ1Y3RvciIsImRvbWFpbkNsaWVudCIsIkxvZ2dlck1hbmFnZXIiLCJnZXRMb2dnZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O2VBU3FC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